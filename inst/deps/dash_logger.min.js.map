{"version":3,"file":"dash_logger.min.js","mappings":"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","sources":["webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///external window \"React\"","webpack:///external window \"PropTypes\"","webpack:///./src/lib/components/DashLogger.react.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","var getCurrentScript = function() {\n    var script = document.currentScript;\n    if (!script) {\n        /* Shim for IE11 and below */\n        /* Do not take into account async scripts and inline scripts */\n\n        var doc_scripts = document.getElementsByTagName('script');\n        var scripts = [];\n\n        for (var i = 0; i < doc_scripts.length; i++) {\n            scripts.push(doc_scripts[i]);\n        }\n\n        scripts = scripts.filter(function(s) { return !s.async && !s.text && !s.textContent; });\n        script = scripts.slice(-1)[0];\n    }\n\n    return script;\n};\n\nvar isLocalScript = function(script) {\n    return /\\/_dash-component-suites\\//.test(script.src);\n};\n\nObject.defineProperty(__webpack_require__, 'p', {\n    get: (function () {\n        var script = getCurrentScript();\n\n        var url = script.src.split('/').slice(0, -1).join('/') + '/';\n\n        return function() {\n            return url;\n        };\n    })()\n});\n\nif (typeof jsonpScriptSrc !== 'undefined') {\n    var __jsonpScriptSrc__ = jsonpScriptSrc;\n    jsonpScriptSrc = function(chunkId) {\n        var script = getCurrentScript();\n        var isLocal = isLocalScript(script);\n\n        var src = __jsonpScriptSrc__(chunkId);\n\n        if(!isLocal) {\n            return src;\n        }\n\n        var srcFragments = src.split('/');\n        var fileFragments = srcFragments.slice(-1)[0].split('.');\n\n        fileFragments.splice(1, 0, \"v0_0_1m1742338313\");\n        srcFragments.splice(-1, 1, fileFragments.join('.'))\n\n        return srcFragments.join('/');\n    };\n}\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"React\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"PropTypes\"];","import React, { useState, useEffect, useRef } from \"react\";\nimport PropTypes from \"prop-types\";\n// import \"../../../dash_logger/assets/dash_logger.css\";\n\n/**\n * DashLogger component for displaying logs in real-time.\n */\nconst DashLogger = ({\n  id,\n  loggerName,\n  loggerNames,\n  maxLogs = 100,\n  className = \"\",\n  style = {},\n  twoColumns = false,\n  timestampFormat = \"%Y-%m-%d %H:%M:%S\",\n}) => {\n  const [logs, setLogs] = useState([]);\n  const [lastTimestamp, setLastTimestamp] = useState(null);\n  const logContainerRef = useRef(null);\n  const eventSourcesRef = useRef([]);\n\n  // Determine if this is a combined logger\n  const isCombined = loggerNames && loggerNames.length > 0;\n\n  // Create default style object\n  const defaultStyle = {\n    height: \"300px\",\n    overflow: \"auto\",\n    border: \"1px solid #ddd\",\n    padding: \"10px\",\n    fontFamily: \"monospace\",\n    backgroundColor: \"#f5f5f5\",\n  };\n\n  // Merge default styles with user-provided styles\n  const combinedStyle = { ...defaultStyle, ...style };\n\n  // Format a log message as a React element\n  const formatLogMessage = (log) => {\n    // Create the log entry with proper CSS classes\n    const levelClass = log.level ? log.level.toLowerCase() : \"info\";\n\n    // Handle multiline messages\n    const messageLines = log.message.split(\"\\n\").map((line, i) => (\n      <React.Fragment key={i}>\n        {i > 0 && <br />}\n        {line}\n      </React.Fragment>\n    ));\n\n    // Format the timestamp to something like '%H:%M:%S'\n    const formattedTimestamp = strftime(timestampFormat, Date(log.timestamp));\n\n    // Render the log entry depending of the twoColumns prop\n    if (twoColumns) {\n      return (\n        <div\n          className={`dash-logger-entry ${levelClass}`}\n          key={`${log.timestamp}-${Math.random()}`}\n        >\n          <span className=\"dash-logger-timestamp\">[{formattedTimestamp}]</span>\n          <span className=\"dash-logger-message\">{messageLines}</span>\n        </div>\n      );\n    }\n\n    // Default rendering\n    return (\n      <div\n        className={`dash-logger-entry ${levelClass}`}\n        key={`${log.timestamp}-${Math.random()}`}\n      >\n        <div className=\"dash-logger-metadata\">\n          <span className=\"dash-logger-timestamp\">[{formattedTimestamp}]</span>\n          {isCombined && (\n            <span className=\"dash-logger-name\">{log.logger_name}</span>\n          )}\n        </div>\n        <div className=\"dash-logger-content\">{messageLines}</div>\n      </div>\n    );\n  };\n\n  // Set up SSE (Server-Sent Events) connection\n  const setupSSE = () => {\n    // Clean up any existing event sources\n    eventSourcesRef.current.forEach((es) => es.close());\n    eventSourcesRef.current = [];\n\n    const setupEventSource = (name) => {\n      console.log(`Attempting to connect to logger: ${name}`);\n      const eventSource = new EventSource(`/logs/stream/${name}`);\n\n      eventSource.onmessage = (event) => {\n        try {\n          const logData = JSON.parse(event.data);\n          setLogs((prevLogs) => {\n            // Add new log and maintain order\n            const updatedLogs = [...prevLogs, logData];\n\n            // Sort by timestamp if needed\n            updatedLogs.sort((a, b) => {\n              return new Date(a.timestamp) - new Date(b.timestamp);\n            });\n\n            // Limit log count\n            if (updatedLogs.length > maxLogs) {\n              return updatedLogs.slice(updatedLogs.length - maxLogs);\n            }\n            return updatedLogs;\n          });\n        } catch (error) {\n          console.error(\"Error processing log message:\", error);\n        }\n      };\n\n      eventSource.onerror = (error) => {\n        console.error(`Error in SSE connection for logger ${name}:`, error);\n\n        // Only try to reconnect if the component is still mounted\n        // and we're not in the middle of reconnecting\n        const isReconnecting = eventSourcesRef.current.reconnecting;\n        if (!isReconnecting) {\n          eventSourcesRef.current.reconnecting = true;\n          eventSource.close();\n\n          // Try to reconnect after a delay with exponential backoff\n          console.log(`Will attempt to reconnect to ${name} in 5 seconds`);\n          setTimeout(() => {\n            // Only reconnect if the component is still mounted\n            if (eventSourcesRef.current) {\n              console.log(`Reconnecting to logger: ${name}`);\n              const newEventSource = setupEventSource(name);\n              eventSourcesRef.current = eventSourcesRef.current.filter(\n                (es) => es !== eventSource\n              );\n              eventSourcesRef.current.push(newEventSource);\n              eventSourcesRef.current.reconnecting = false;\n            }\n          }, 5000);\n        }\n      };\n\n      // Add onopen handler to confirm successful connection\n      eventSource.onopen = () => {\n        console.log(`Successfully connected to logger: ${name}`);\n      };\n\n      return eventSource;\n    };\n\n    // Set up event sources for all loggers\n    if (isCombined) {\n      loggerNames.forEach((name) => {\n        const es = setupEventSource(name);\n        eventSourcesRef.current.push(es);\n      });\n    } else {\n      const name = loggerName || id;\n      const es = setupEventSource(name);\n      eventSourcesRef.current.push(es);\n    }\n  };\n\n  //   const setupSSE = () => {\n  //     // Clean up any existing event sources\n  //     eventSourcesRef.current.forEach((es) => es.close());\n  //     eventSourcesRef.current = [];\n\n  //     const setupEventSource = (name) => {\n  //       const eventSource = new EventSource(`/logs/stream/${name}`);\n\n  //       eventSource.onmessage = (event) => {\n  //         try {\n  //           const logData = JSON.parse(event.data);\n\n  //           setLogs((prevLogs) => {\n  //             // Add new log and maintain order\n  //             const updatedLogs = [...prevLogs, logData];\n\n  //             // Sort by timestamp if needed\n  //             updatedLogs.sort((a, b) => {\n  //               return new Date(a.timestamp) - new Date(b.timestamp);\n  //             });\n\n  //             // Limit log count\n  //             if (updatedLogs.length > maxLogs) {\n  //               return updatedLogs.slice(updatedLogs.length - maxLogs);\n  //             }\n  //             return updatedLogs;\n  //           });\n  //         } catch (error) {\n  //           console.error(\"Error processing log message:\", error);\n  //         }\n  //       };\n\n  //       eventSource.onerror = (error) => {\n  //         console.error(`Error in SSE connection for logger ${name}:`, error);\n  //         eventSource.close();\n\n  //         // Try to reconnect after a delay\n  //         setTimeout(() => {\n  //           const newEventSource = setupEventSource(name);\n  //           eventSourcesRef.current = eventSourcesRef.current.filter(\n  //             (es) => es !== eventSource\n  //           );\n  //           eventSourcesRef.current.push(newEventSource);\n  //         }, 5000);\n  //       };\n\n  //       return eventSource;\n  //     };\n\n  //     // Set up event sources for all loggers\n  //     if (isCombined) {\n  //       loggerNames.forEach((name) => {\n  //         const es = setupEventSource(name);\n  //         eventSourcesRef.current.push(es);\n  //       });\n  //     } else {\n  //       const name = loggerName || id;\n  //       const es = setupEventSource(name);\n  //       eventSourcesRef.current.push(es);\n  //     }\n  //   };\n\n  // Scroll to bottom when logs change\n  useEffect(() => {\n    if (logContainerRef.current) {\n      logContainerRef.current.scrollTop = logContainerRef.current.scrollHeight;\n    }\n  }, [logs]);\n\n  // Set up SSE\n  useEffect(() => {\n    // Add a small delay before initial connection attempt\n    const connectionTimer = setTimeout(() => {\n      setupSSE();\n    }, 1000); // 1 second delay\n\n    // Clean up on unmount\n    return () => {\n      clearTimeout(connectionTimer);\n      // Close all event sources\n      eventSourcesRef.current.forEach((es) => es.close());\n      eventSourcesRef.current = [];\n    };\n  }, [loggerName, isCombined, loggerNames, id]); // Add dependencies\n\n  return (\n    <div\n      id={id}\n      className={`dash-logger ${className || \"\"}`}\n      style={combinedStyle}\n      ref={logContainerRef}\n    >\n      {logs.map(formatLogMessage)}\n    </div>\n  );\n};\n\nDashLogger.propTypes = {\n  /**\n   * The ID used to identify this component in Dash callbacks.\n   */\n  id: PropTypes.string.isRequired,\n\n  /**\n   * Name of the logger to display (for single logger view)\n   */\n  loggerName: PropTypes.string,\n\n  /**\n   * Names of loggers to display (for combined view)\n   */\n  loggerNames: PropTypes.arrayOf(PropTypes.string),\n\n  /**\n   * Maximum number of logs to display\n   */\n  maxLogs: PropTypes.number,\n\n  /**\n   * Additional class name for the logger container\n   */\n  className: PropTypes.string,\n\n  /**\n   * Additional inline styles for the logger container\n   */\n  style: PropTypes.object,\n\n  /**\n   * Whether to display logs in two columns (timestamp and message)\n   */\n  twoColumns: PropTypes.bool,\n\n  /**\n   * The format string for the timestamp\n   */\n  timestampFormat: PropTypes.string,\n};\n\n/* Port of strftime() by T. H. Doan (https://thdoan.github.io/strftime/)\n *\n * Day of year (%j) code based on Joe Orost's answer:\n * http://stackoverflow.com/questions/8619879/javascript-calculate-the-day-of-the-year-1-366\n *\n * Week number (%V) code based on Taco van den Broek's prototype:\n * http://techblog.procurios.nl/k/news/view/33796/14863/calculate-iso-8601-week-and-year-in-javascript.html\n */\nfunction strftime(sFormat, date) {\n  if (typeof sFormat !== \"string\") {\n    return \"\";\n  }\n\n  if (!(date instanceof Date)) {\n    date = new Date();\n  }\n\n  const nDay = date.getDay();\n  const nDate = date.getDate();\n  const nMonth = date.getMonth();\n  const nYear = date.getFullYear();\n  const nHour = date.getHours();\n  const nTime = date.getTime();\n  const aDays = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ];\n  const aMonths = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ];\n  const aDayCount = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];\n  const isLeapYear = () =>\n    (nYear % 4 === 0 && nYear % 100 !== 0) || nYear % 400 === 0;\n  const getThursday = () => {\n    const target = new Date(date);\n    target.setDate(nDate - ((nDay + 6) % 7) + 3);\n    return target;\n  };\n  const zeroPad = (nNum, nPad) => (Math.pow(10, nPad) + nNum + \"\").slice(1);\n\n  return sFormat.replace(/%[a-z]+\\b/gi, (sMatch) => {\n    return (\n      ({\n        \"%a\": aDays[nDay].slice(0, 3),\n        \"%A\": aDays[nDay],\n        \"%b\": aMonths[nMonth].slice(0, 3),\n        \"%B\": aMonths[nMonth],\n        \"%c\": date.toUTCString().replace(\",\", \"\"),\n        \"%C\": Math.floor(nYear / 100),\n        \"%d\": zeroPad(nDate, 2),\n        \"%e\": nDate,\n        \"%F\": new Date(nTime - date.getTimezoneOffset() * 60000)\n          .toISOString()\n          .slice(0, 10),\n        \"%G\": getThursday().getFullYear(),\n        \"%g\": (getThursday().getFullYear() + \"\").slice(2),\n        \"%H\": zeroPad(nHour, 2),\n        \"%I\": zeroPad(((nHour + 11) % 12) + 1, 2),\n        \"%j\": zeroPad(\n          aDayCount[nMonth] + nDate + (nMonth > 1 && isLeapYear() ? 1 : 0),\n          3\n        ),\n        \"%k\": nHour,\n        \"%l\": ((nHour + 11) % 12) + 1,\n        \"%m\": zeroPad(nMonth + 1, 2),\n        \"%n\": nMonth + 1,\n        \"%M\": zeroPad(date.getMinutes(), 2),\n        \"%p\": nHour < 12 ? \"AM\" : \"PM\",\n        \"%P\": nHour < 12 ? \"am\" : \"pm\",\n        \"%s\": Math.round(nTime / 1000),\n        \"%S\": zeroPad(date.getSeconds(), 2),\n        \"%u\": nDay || 7,\n        \"%V\": (() => {\n          const target = getThursday();\n          const n1stThu = target.valueOf();\n          target.setMonth(0, 1);\n          const nJan1 = target.getDay();\n\n          if (nJan1 !== 4) {\n            target.setMonth(0, 1 + ((4 - nJan1 + 7) % 7));\n          }\n\n          return zeroPad(1 + Math.ceil((n1stThu - target) / 604800000), 2);\n        })(),\n        \"%w\": nDay,\n        \"%x\": date.toLocaleDateString(),\n        \"%X\": date.toLocaleTimeString(),\n        \"%y\": (nYear + \"\").slice(2),\n        \"%Y\": nYear,\n        \"%z\": date.toTimeString().replace(/.+GMT([+-]\\d+).+/, \"$1\"),\n        \"%Z\": date.toTimeString().replace(/.+\\((.+?)\\)$/, \"$1\"),\n        \"%Zs\": new Intl.DateTimeFormat(\"default\", {\n          timeZoneName: \"short\",\n        })\n          .formatToParts(date)\n          .find((oPart) => oPart.type === \"timeZoneName\")?.value,\n      }[sMatch] || \"\") + \"\" || sMatch\n    );\n  });\n}\n\nexport default DashLogger;\n"],"names":["url","__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","getCurrentScript","script","document","currentScript","doc_scripts","getElementsByTagName","scripts","i","length","push","filter","s","async","text","textContent","slice","src","split","join","jsonpScriptSrc","__jsonpScriptSrc__","chunkId","isLocal","test","srcFragments","fileFragments","splice","window","DashLogger","_ref","id","loggerName","loggerNames","_ref$maxLogs","maxLogs","_ref$className","className","_ref$style","style","_ref$twoColumns","twoColumns","_ref$timestampFormat","timestampFormat","_useState2","_slicedToArray","useState","logs","setLogs","_useState4","logContainerRef","useRef","eventSourcesRef","isCombined","combinedStyle","_objectSpread","height","overflow","border","padding","fontFamily","backgroundColor","useEffect","current","scrollTop","scrollHeight","connectionTimer","setTimeout","forEach","es","close","setupEventSource","name","console","log","concat","eventSource","EventSource","onmessage","event","logData","JSON","parse","data","prevLogs","updatedLogs","sort","b","Date","timestamp","error","onerror","reconnecting","newEventSource","onopen","setupSSE","clearTimeout","React","ref","map","levelClass","level","toLowerCase","messageLines","message","line","formattedTimestamp","sFormat","date","nDay","getDay","nDate","getDate","nMonth","getMonth","nYear","getFullYear","nHour","getHours","nTime","getTime","aDays","aMonths","aDayCount","getThursday","target","setDate","zeroPad","nNum","nPad","Math","pow","replace","sMatch","_Intl$DateTimeFormat$","toUTCString","floor","getTimezoneOffset","toISOString","getMinutes","round","getSeconds","n1stThu","valueOf","setMonth","nJan1","ceil","toLocaleDateString","toLocaleTimeString","toTimeString","Intl","DateTimeFormat","timeZoneName","formatToParts","find","oPart","type","strftime","random","logger_name","propTypes","PropTypes","isRequired"],"sourceRoot":""}